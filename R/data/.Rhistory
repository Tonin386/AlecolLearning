library(ltm)
install.packages("ltm");
packages.install("expm")
install.packages("expm");
packages.install("expm")
install.packages(("expm"))
model <- rasch(data, start.val = "random")
library('ltm')
library("msm")
library('ltm')
data -> read.delim((file.choose(), header = FALSE))
data -> read.delim(file.choose(), header = FALSE)
data = read.delim(file.choose(), header = FALSE)
data.view()
view(data)
View(data)
data = read.delim(file.choose(), header = FALSE)
model -> rasch(data)
model = rasch(data)
model = rasch(data; IRT.param = TRUE)
model = rasch(data, IRT.param = TRUE)
GoF.rasch(model)
library(ltm)
#Tutoriel : https://www.youtube.com/watch?v=cex9n2F4Ymg&t=621s
#install and load ltm package
install.packages("ltm")
library(ltm)
#load your data
data <- read.delim(file.choose(),header = FALSE)
#view(data)
#define Rasch model
model <- rasch(data, IRT.param = TRUE)
#Si "Warning message:
#In rasch(data, IRT.param = TRUE) :
#Hessian matrix at convergence is not positive definite; unstable solution.
model <- rasch(data, start.val = "random")
#assessing the model fit of our Rasch model
GoF.rasch(model)
#item difficulty level
coef(model, prob= TRUE,order=TRUE)
#item characteristic curve
plot(model,type ="ICC")
plot(model,type="ICC", items = c(3,4))
#item information curve
plot(model,type="IIC")
plot(model,type="IIC", items =c(3,4))
plot(model,type="IIC",items = 0)
#test information
information(model,c(-4,4))
install.packages("ltm")
setwd("AlecolLearning/R/data")
reponses <- read.csv2("~/AlecolLearning/R/data/qcm22.csv")
# Assessing the data
dsc<-descript(reponses)
library(ltm)admisc
library(ltm)
reponses <- read.csv2("~/AlecolLearning/R/data/qcm22.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
# Construit le modèle IRT-1pl
IRT_1pl <- rasch(reponses,IRT.param = TRUE)
#IRT_1pl <- rasch(reponses,start.val="random")
# Test l'unidimensionnalité du test
unidimTest(IRT_1pl)
View(IRT_1pl)
View(IRT_1pl[["X"]])
IRT_1pl <- rasch(reponses,start.val="random")
unidimTest(IRT_1pl)
IRT_1pl <- rasch(reponses,start.val="random")
unidimTest(IRT_1pl)
warnings()
View(dsc)
reponses <- read.csv2("~/AlecolLearning/R/data/qcm.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
IRT_1pl <- rasch(reponses,start.val="random")
# Construit le modèle IRT-1pl
IRT_1pl <- rasch(reponses,IRT.param = TRUE)
#IRT_1pl <- rasch(reponses,start.val="random")
IRT_1pl <- rasch(reponses,start.val="random")
View(IRT_1pl)
View(IRT_1pl)
IRT
IRT_1pl = 0
IRT_1pl <- rasch(reponses,start.val="random")
unidimTest(IRT_1pl)
rm(list = ls())
reponses <- read.csv2("~/AlecolLearning/R/data/qcm22.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
# Construit le modèle IRT-1pl
#IRT_1pl <- rasch(reponses,IRT.param = TRUE)
IRT_1pl <- rasch(reponses,start.val="random")
GoF.rasch(IRT_1pl)
reponses <- read.csv2("~/AlecolLearning/R/data/qcm23.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
reponses <- read.csv2("~/AlecolLearning/R/data/qcm18.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
reponses <- read.csv2("~/AlecolLearning/R/data/qcm18.csv")
# Assessing the data
dsc<-descript(reponses)
dsc
# Construit le modèle IRT-1pl
#IRT_1pl <- rasch(reponses,IRT.param = TRUE)
IRT_1pl <- rasch(reponses,start.val="random")
# Test l'unidimensionnalité du test
unidimTest(IRT_1pl)
GoF.rasch(IRT_1pl)
results <- unidimTest(IRT_1pl)
legend("topright", c("Real Data", "Average Simulated Data"), lty = 1,
pch = 1:2, col = 1:2, bty = "n")
plot(results, type = "b", pch = 1:2)
legend("topright", c("Real Data", "Average Simulated Data"), lty = 1,
pch = 1:2, col = 1:2, bty = "n")
results
results
results.rho
results.Rho
results.keys()
results$Rho
View(results$Rho)
results
results
results
summary(IRT_1pl)
GoF.rasch(IRT_1pl)
View(results$Rho)
View(results$Rho)
plot(results, type = "b", pch = 1:2)
legend("topright", c("Real Data", "Average Simulated Data"), lty = 1,
pch = 1:2, col = 1:2, bty = "n")
View(results$Rho)
